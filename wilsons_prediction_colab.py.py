# -*- coding: utf-8 -*-
"""wilson's disease code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z-yog_pTrLNmCQWR99_1frv7R5Lapi55
"""

!pip install pandas scikit-learn

!pip install pandas scikit-learn --quiet

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load
df = pd.read_csv('/content/Wilson_disease_dataset.csv')

# Impute missing values
for col in df.select_dtypes(include=['float64', 'int64']):
    df[col].fillna(df[col].median(), inplace=True)
for col in df.select_dtypes(include=['object']):
    df[col].fillna(df[col].mode()[0], inplace=True)

from google.colab import drive
drive.mount('/content/drive')

# Drop unneeded columns
df.drop('Name', axis=1, inplace=True)

# Encode categoricals
le = LabelEncoder()
for col in df.select_dtypes(include=['object', 'bool']):
    df[col] = le.fit_transform(df[col])

X = df.drop('Is_Wilson_Disease', axis=1)
y = df['Is_Wilson_Disease']

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import pandas as pd
from tabulate import tabulate

# ✅ Make predictions
y_pred = model.predict(X_test)

# ✅ Compute metrics
accuracy = accuracy_score(y_test, y_pred)
report_dict = classification_report(y_test, y_pred, output_dict=True)
cm = confusion_matrix(y_test, y_pred)

# ✅ Build DataFrames for table formatting
acc_df = pd.DataFrame([['Accuracy', accuracy]], columns=['Metric', 'Value'])
report_df = pd.DataFrame(report_dict).T
cm_df = pd.DataFrame(cm,
                     index=['Actual 0', 'Actual 1'],
                     columns=['Predicted 0', 'Predicted 1'])

# ✅ Print with fancy_grid formatting
print(tabulate(acc_df, headers='keys', tablefmt='fancy_grid', floatfmt=".2f"))
print("\nClassification Report:")
print(tabulate(report_df, headers='keys', tablefmt='fancy_grid', floatfmt=".2f"))
print("\nConfusion Matrix:")
print(tabulate(cm_df, headers='keys', tablefmt='fancy_grid'))

from sklearn.model_selection import cross_val_score
scores = cross_val_score(model, X, y, cv=5, scoring='f1')
print("F1-score (5-fold CV):", scores.mean(), "±", scores.std())

from sklearn.model_selection import GridSearchCV
param_grid = {
  'n_estimators': [50, 100, 200],
  'max_depth': [None, 10, 20]
}
grid = GridSearchCV(RandomForestClassifier(random_state=42), param_grid, cv=3, scoring='f1')
grid.fit(X_train, y_train)
print(grid.best_params_, grid.best_score_)

print(X.columns.tolist())

# Importing necessary libraries
import pandas as pd
from sklearn.preprocessing import LabelEncoder

# Sample data for patient example
patient_example = pd.DataFrame({
    'Age': [24],
    'Sex': ['Male'],
    'Ceruloplasmin Level': [8.5],
    'Copper in Blood Serum': [65],
    'Free Copper in Blood Serum': [55],
    'Copper in Urine': [150],
    'ALT': [35],
    'AST': [22],
    'Total Bilirubin': [0.5],
    'Albumin': [4.5],
    'Alkaline Phosphatase (ALP)': [120],
    'Prothrombin Time / INR': [1.1],
    'Gamma-Glutamyl Transferase (GGT)': [20],
    'Kayser-Fleischer Rings': ['Negative'],
    'Neurological Symptoms Score': [0],
    'Psychiatric Symptoms': [1],
    'Cognitive Function Score': [3],
    'Family History': ['None'],
    'ATB7B Gene Mutation': ['Absent'],
    'Region': ['Urban'],
    'Socioeconomic Status': ['Middle'],
    'Alcohol Use': ['No'],
    'BMI': [22.5]
})

# Categorical columns to encode
categorical_columns = ['Sex', 'Kayser-Fleischer Rings', 'Family History', 'ATB7B Gene Mutation', 'Region', 'Socioeconomic Status', 'Alcohol Use']

# LabelEncoder initialization
label_encoder = LabelEncoder()

# Encode each column in patient_example
for col in categorical_columns:
    patient_example[col] = label_encoder.fit_transform(patient_example[col])

# Display the updated DataFrame in a more readable format using tabulate
from tabulate import tabulate  # Importing here after encoding

# Printing the patient data in a neat tabular format
print(tabulate(
    patient_example.values.tolist(),
    headers=patient_example.columns,
    tablefmt='fancy_grid'
))

import joblib

# Save the trained model to a file
joblib.dump(model, 'wilson_disease_model.pkl')

# To load it again later:
loaded_model = joblib.load('wilson_disease_model.pkl')